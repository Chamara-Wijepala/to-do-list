{"version":3,"file":"main.js","mappings":"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","sources":["webpack://to-do-list/./src/modules/manage-project-logic.js","webpack://to-do-list/./src/modules/manage-project-dom.js","webpack://to-do-list/./src/modules/manage-task-dom.js","webpack://to-do-list/./src/index.js","webpack://to-do-list/./src/modules/manage-task-logic.js"],"sourcesContent":["const LOCAL_STORAGE = 'project.list';\nexport let projectStorage = JSON.parse(localStorage.getItem(LOCAL_STORAGE)) || [];\n\nconst LOCAL_STORAGE_PROJECT_ID = 'project.projectId';\nexport let activeProjectId = localStorage.getItem(LOCAL_STORAGE_PROJECT_ID);\n\nexport function setList() {\n    localStorage.setItem(LOCAL_STORAGE, JSON.stringify(projectStorage));\n    localStorage.setItem(LOCAL_STORAGE_PROJECT_ID, activeProjectId);\n};\n\nexport function selectProject(e) {\n    activeProjectId = e.target.dataset.id;\n};\n\nexport function appendProject(name) {\n    let project = createProject(name);\n    projectStorage.push(project);\n};\nfunction createProject(name) {\n    return {\n        id: Date.now().toString(),\n        name: name,\n        tasks: [],\n    };\n};\n\nexport function deleteProject() {\n    projectStorage = projectStorage.filter(project => project.id !== activeProjectId);\n    activeProjectId = null;\n};","import {projectStorage,\n        appendProject,\n        setList,\n        activeProjectId,\n        deleteProject } from \"./manage-project-logic\";\n\nconst projectList = document.getElementById('project-list');\nconst projectForm = document.getElementById('project-form');\nconst projectInput = document.getElementById('project-input');\nconst taskMenu = document.getElementById('task-menu');\nconst taskForm = document.getElementById('task-form');\nconst deleteProjectButton = document.querySelector('.delete-project-button');\n\n//creates and appends a li element to project-list for each object in projectStorage\n//and renders task-menu if there's a selected project\nexport function renderList() {\n    clearProjectList();\n    projectStorage.forEach(project => {\n        const projectElement = document.createElement('li');\n        projectElement.classList.add('project');\n        projectElement.dataset.id = project.id;\n        projectElement.innerText = project.name;\n        if(project.id === activeProjectId) {\n            projectElement.classList.add('active-project');\n        };\n        projectList.appendChild(projectElement);\n    });\n    renderTaskMenu();\n};\nfunction clearProjectList() {\n    projectList.textContent = '';\n};\nfunction renderTaskMenu() {\n    if (activeProjectId === null) {\n        taskMenu.style.display = 'none';\n        taskForm.style.display = 'none';\n    }\n    else {\n        taskMenu.style.display = '';\n        taskForm.style.display = '';\n    }\n};\n\n//Creates a dynamically named project object and stores it in projectStorage\nprojectForm.addEventListener('submit', e => {\n    e.preventDefault();\n    processForm();\n    setList()\n    renderList();\n});\nfunction processForm() {\n    let projectName = projectInput.value;\n    if (projectName === null || projectName === '') return;\n    projectInput.value = null;\n    appendProject(projectName);\n};\n\n//Deletes selected project using array filter()\ndeleteProjectButton.addEventListener('click', e => {\n    deleteProject();\n    setList();\n    renderList();\n});","import { appendTask } from \"./manage-task-logic\";\nimport { projectStorage, activeProjectId } from \"./manage-project-logic\";\n\nconst taskMenu = document.getElementById('task-menu');\nconst taskTemplate = document.getElementById('task-template');\nconst taskInput = document.getElementById('task-input');\n\n//Creates and appends task elements to taskMenu\n//for every task object in activeProjectId.tasks\nexport function renderTaskList() {\n    clearTaskList();\n    const selectedProject = projectStorage.find(project => project.id === activeProjectId);\n    selectedProject.tasks.forEach(task => {\n        const taskElement = document.importNode(taskTemplate.content, true);\n        const taskName = taskElement.querySelector('p');\n        taskName.innerText = task.name;\n        const checkBox = taskElement.querySelector('input');\n        checkBox.id = task.id;\n        checkBox.checked = task.priority;\n        const label = taskElement.querySelector('label');\n        label.htmlFor = task.id;\n        label.append('Priority: ' + (task.priority ? 'High' : 'Normal'));\n        const deleteTaskButton = taskElement.querySelector('button');\n        deleteTaskButton.id = task.id;\n        deleteTaskButton.innerText = 'Delete Task';\n        \n        taskMenu.appendChild(taskElement);\n    });\n};\nfunction clearTaskList() {\n    taskMenu.textContent = '';\n};\n\nexport function processTaskForm() {\n    let taskName = taskInput.value;\n    if (taskName === null || taskName === '') return;\n    taskInput.value = null;\n    appendTask(taskName);\n};","import './styles/index.css';\nimport { activeProjectId, setList, selectProject } from './modules/manage-project-logic';\nimport { renderList } from './modules/manage-project-dom';\nimport { renderTaskList, processTaskForm } from './modules/manage-task-dom';\nimport { togglePriority, deleteTask } from './modules/manage-task-logic';\n\nconst projectList = document.getElementById('project-list');\nconst taskMenu = document.getElementById('task-menu');\nconst taskForm = document.getElementById('task-form');\n\nfunction loadPage() {\n    setList();\n    renderList();\n    if (activeProjectId !== 'null') {\n        renderTaskList();\n    }\n    else return;\n};\n\n//Creates a dynamically named task and stores it in tasks array of activeProject\ntaskForm.addEventListener('submit', e => {\n    e.preventDefault();\n    processTaskForm();\n    loadPage();\n});\n\n//Applies a class to a clicked project then saves project's id in localStorage\nprojectList.addEventListener('click', e => {\n    if (e.target.tagName.toLowerCase() === 'li') {\n        selectProject(e);\n        loadPage();\n    };\n});\n\n//Toggles task priority\ntaskMenu.addEventListener('change', e => {\n    if (e.target.tagName.toLowerCase() === 'input') {\n        togglePriority(e);\n        loadPage();\n    };\n});\n\ntaskMenu.addEventListener('click', e => {\n    if (e.target.tagName.toLowerCase() === 'button') {\n        deleteTask(e);\n        loadPage();\n    };\n});\n\nloadPage();","import { projectStorage, activeProjectId } from \"./manage-project-logic\";\n\nexport function appendTask(name) {\n    let activeProject = projectStorage.find(project => project.id === activeProjectId);\n    let task = createTask(name);\n    activeProject.tasks.push(task);\n};\nfunction createTask(name) {\n    return {\n        id: Date.now().toString(),\n        name: name,\n        date: null,\n        priority: false,\n    };\n};\n\nexport function togglePriority(e) {\n    let activeProject = projectStorage.find(project => project.id === activeProjectId);\n    const activeTaskId = e.target.id;\n    activeProject.tasks.forEach(task => {\n        if (task.id === activeTaskId) {\n            (task.priority === true) ? task.priority = false : task.priority = true;\n        };\n    });\n};\n\nexport function deleteTask(e) {\n    const activeProject = projectStorage.find(project => project.id === activeProjectId);\n    const activeTaskId = e.target.id;\n    activeProject.tasks = activeProject.tasks.filter(task => task.id !== activeTaskId);\n};"],"names":["LOCAL_STORAGE","projectStorage","JSON","parse","localStorage","getItem","LOCAL_STORAGE_PROJECT_ID","activeProjectId","setList","setItem","stringify","projectList","document","getElementById","projectForm","projectInput","taskMenu","taskForm","deleteProjectButton","querySelector","renderList","textContent","forEach","project","projectElement","createElement","classList","add","dataset","id","innerText","name","appendChild","style","display","addEventListener","e","preventDefault","projectName","value","Date","now","toString","tasks","createProject","push","appendProject","processForm","filter","taskTemplate","taskInput","loadPage","find","task","taskElement","importNode","content","checkBox","checked","priority","label","htmlFor","append","deleteTaskButton","taskName","activeProject","date","createTask","appendTask","processTaskForm","target","tagName","toLowerCase","selectProject","activeTaskId","togglePriority","deleteTask"],"sourceRoot":""}